# os: windows

# version format
version: 2021.1.{build}

branches:
  only:
    - main

only_commits:
  message: /\[build\]/

environment:
  PYTHON_VERSION: 3.8

  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      MINICONDA: "C:\\Miniconda38-x64"
      WINKITS: "C:\\Program Files (x86)\\Windows Kits\\8.0\\bin\\x64"
      platform: x64

    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      platform: x64
      MINICONDA: /home/appveyor/Miniconda38-x64
      MINICONDA_REPO: https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-Linux-x86_64.sh

    - APPVEYOR_BUILD_WORKER_IMAGE: macOS
      platform: x64
      MINICONDA: /Users/appveyor/Miniconda38-x64
      MINICONDA_REPO: https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-MacOSX-x86_64.sh

init:
  - ps: |
      if ($isMacOS) {
        brew install wget
      }

install:
  - sh: wget $MINICONDA_REPO -O ~/miniconda.sh
  - sh: bash ~/miniconda.sh -b -p $MINICONDA

  - cmd: set PATH=%MINICONDA%;%MINICONDA%\Scripts;%WINKITS%;%PATH%
  - cmd: activate.bat

  - sh: source $MINICONDA/bin/activate
  - sh: conda init

  - cmd: set PYTHONUNBUFFERED=1
  - sh: PYTHONUNBUFFERED=1

  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda config --set show_channel_urls true
  - conda config --add channels conda-forge
  - conda install -c conda-forge setuptools twine wheel conda-build anaconda-client conda-verify --yes --quiet # coverage codecov

build: off

build_script:
  - which python
  - python setup.py build

# test_script:
#  - ps: |
#      python -m unittest tests.graph.test_basegraph
#      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
#  - python -m unittest tests.graph.test_basegraph
#  - coverage run -m unittest tests.graph.test_basegraph
#  - coverage xml
#  - ps: "cd .."

after_test:
  - conda build --quiet -c bfxcss -c conda-forge conda-recipe --python=3.8 --output-folder conda_dist
  - python setup.py sdist bdist_wheel -d pypi_dist clean --all
  - ps: "ls pypi_dist"
  - ps: "ls conda_dist"

artifacts:
  - path: conda_dist\**\*.tar.bz2
  - path: pypi_dist\*.whl
#    name: pypi_whl
#  - path: pagral\coverage.xml
#  - path: pagral\.coverage


on_success:
  # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - cmd: anaconda -t %CONDA_TOKEN% upload -u bfxcss conda_dist\**\*.tar.bz2
  - cmd: twine upload pypi_dist\*.whl -u __token__ -p %PYPI_TOKEN%

  - sh: anaconda -t $CONDA_TOKEN upload -u bfxcss conda_dist/**/*.tar.bz2
  # - sh:  twine upload pypi_dist/*.whl -u __token__ -p $PYPI_TOKEN


#deploy:
#  - provider: GitHub
#    release: pagral-v$(APPVEYOR_BUILD_VERSION)
#    description: 'Latest tagged release of Pagral'
#    artifact: pypi_whl
#    draft: false
#    prerelease: false
#    auth_token:
#      secure: qmatt+fSRfcwrPNpBFF+bXSOtwPdIJ4cqBoHnxEkuLDLd4N8GHJqeg2QPxaFI6u2
#    on:
#      branch: master                # release from master branch only
#      APPVEYOR_REPO_TAG: false       # deploy on tag push only

# on_finish:
  # - sh: export APPVEYOR_SSH_BLOCK=true
  # - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -

# UPLOAD TO CODECOV
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
#  - codecov -f pagral\coverage.xml
